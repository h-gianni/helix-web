generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  clerkId   String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  members   Member[]
  teams     Team[]
}

model Team {
  id                  String           @id @default(cuid())
  name                String
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  ownerId             String
  description         String?
  initiatives         Initiative[]
  members             Member[]
  owner               User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  selectedInitiatives TeamInitiative[]
}

model Member {
  id        String   @id @default(cuid())
  userId    String
  teamId    String
  title     String?
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String?
  lastName  String?
  goals     Goal[]
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reports   Report[]
  scores    Score[]

  @@unique([userId, teamId])
}

model Initiative {
  id          String           @id @default(cuid())
  name        String
  description String?
  teamId      String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  team        Team?            @relation(fields: [teamId], references: [id], onDelete: Cascade)
  scores      Score[]
  teams       TeamInitiative[]
}

model TeamInitiative {
  id           String     @id @default(cuid())
  teamId       String
  initiativeId String
  createdAt    DateTime   @default(now())
  initiative   Initiative @relation(fields: [initiativeId], references: [id], onDelete: Cascade)
  team         Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, initiativeId])
}

model Score {
  id           String     @id @default(cuid())
  value        Int
  feedback     String?
  memberId     String
  initiativeId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  initiative   Initiative @relation(fields: [initiativeId], references: [id], onDelete: Cascade)
  member       Member     @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model Goal {
  id          String   @id @default(cuid())
  memberId    String
  description String
  year        Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  member      Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model Report {
  id        String   @id @default(cuid())
  content   String
  memberId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
}
